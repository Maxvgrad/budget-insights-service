/*
 * This file is generated by jOOQ.
 */
package com.ploter.budgetinsights.infrastracture.persistence.jooq.model.tables;


import com.ploter.budgetinsights.infrastracture.persistence.jooq.model.Keys;
import com.ploter.budgetinsights.infrastracture.persistence.jooq.model.Public;
import com.ploter.budgetinsights.infrastracture.persistence.jooq.model.tables.records.ImportGroupRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ImportGroup extends TableImpl<ImportGroupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.import_group</code>
     */
    public static final ImportGroup IMPORT_GROUP = new ImportGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImportGroupRecord> getRecordType() {
        return ImportGroupRecord.class;
    }

    /**
     * The column <code>public.import_group.id</code>.
     */
    public final TableField<ImportGroupRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.import_group.import_source_id</code>.
     */
    public final TableField<ImportGroupRecord, String> IMPORT_SOURCE_ID = createField(DSL.name("import_source_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.import_group.import_source_type</code>.
     */
    public final TableField<ImportGroupRecord, String> IMPORT_SOURCE_TYPE = createField(DSL.name("import_source_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private ImportGroup(Name alias, Table<ImportGroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private ImportGroup(Name alias, Table<ImportGroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.import_group</code> table reference
     */
    public ImportGroup(String alias) {
        this(DSL.name(alias), IMPORT_GROUP);
    }

    /**
     * Create an aliased <code>public.import_group</code> table reference
     */
    public ImportGroup(Name alias) {
        this(alias, IMPORT_GROUP);
    }

    /**
     * Create a <code>public.import_group</code> table reference
     */
    public ImportGroup() {
        this(DSL.name("import_group"), null);
    }

    public <O extends Record> ImportGroup(Table<O> child, ForeignKey<O, ImportGroupRecord> key) {
        super(child, key, IMPORT_GROUP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ImportGroupRecord> getPrimaryKey() {
        return Keys.IMPORT_GROUP_PKEY;
    }

    @Override
    public ImportGroup as(String alias) {
        return new ImportGroup(DSL.name(alias), this);
    }

    @Override
    public ImportGroup as(Name alias) {
        return new ImportGroup(alias, this);
    }

    @Override
    public ImportGroup as(Table<?> alias) {
        return new ImportGroup(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ImportGroup rename(String name) {
        return new ImportGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ImportGroup rename(Name name) {
        return new ImportGroup(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ImportGroup rename(Table<?> name) {
        return new ImportGroup(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
