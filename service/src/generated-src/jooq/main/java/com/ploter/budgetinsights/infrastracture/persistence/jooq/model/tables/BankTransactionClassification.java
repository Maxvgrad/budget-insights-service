/*
 * This file is generated by jOOQ.
 */
package com.ploter.budgetinsights.infrastracture.persistence.jooq.model.tables;


import com.ploter.budgetinsights.infrastracture.persistence.jooq.model.Keys;
import com.ploter.budgetinsights.infrastracture.persistence.jooq.model.Public;
import com.ploter.budgetinsights.infrastracture.persistence.jooq.model.tables.records.BankTransactionClassificationRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BankTransactionClassification extends TableImpl<BankTransactionClassificationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.bank_transaction_classification</code>
     */
    public static final BankTransactionClassification BANK_TRANSACTION_CLASSIFICATION = new BankTransactionClassification();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankTransactionClassificationRecord> getRecordType() {
        return BankTransactionClassificationRecord.class;
    }

    /**
     * The column <code>public.bank_transaction_classification.id</code>.
     */
    public final TableField<BankTransactionClassificationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>public.bank_transaction_classification.bank_transaction_id</code>.
     */
    public final TableField<BankTransactionClassificationRecord, Long> BANK_TRANSACTION_ID = createField(DSL.name("bank_transaction_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>public.bank_transaction_classification.category_fifty_thirty_twenty</code>.
     */
    public final TableField<BankTransactionClassificationRecord, String> CATEGORY_FIFTY_THIRTY_TWENTY = createField(DSL.name("category_fifty_thirty_twenty"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>public.bank_transaction_classification.category_detailed</code>.
     */
    public final TableField<BankTransactionClassificationRecord, String> CATEGORY_DETAILED = createField(DSL.name("category_detailed"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.bank_transaction_classification.comment</code>.
     */
    public final TableField<BankTransactionClassificationRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "");

    private BankTransactionClassification(Name alias, Table<BankTransactionClassificationRecord> aliased) {
        this(alias, aliased, null);
    }

    private BankTransactionClassification(Name alias, Table<BankTransactionClassificationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.bank_transaction_classification</code>
     * table reference
     */
    public BankTransactionClassification(String alias) {
        this(DSL.name(alias), BANK_TRANSACTION_CLASSIFICATION);
    }

    /**
     * Create an aliased <code>public.bank_transaction_classification</code>
     * table reference
     */
    public BankTransactionClassification(Name alias) {
        this(alias, BANK_TRANSACTION_CLASSIFICATION);
    }

    /**
     * Create a <code>public.bank_transaction_classification</code> table
     * reference
     */
    public BankTransactionClassification() {
        this(DSL.name("bank_transaction_classification"), null);
    }

    public <O extends Record> BankTransactionClassification(Table<O> child, ForeignKey<O, BankTransactionClassificationRecord> key) {
        super(child, key, BANK_TRANSACTION_CLASSIFICATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BankTransactionClassificationRecord> getPrimaryKey() {
        return Keys.BANK_TRANSACTION_CLASSIFICATION_PKEY;
    }

    @Override
    public List<UniqueKey<BankTransactionClassificationRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.BANK_TRANSACTION_CLASSIFICATION_BANK_TRANSACTION_ID_KEY);
    }

    @Override
    public BankTransactionClassification as(String alias) {
        return new BankTransactionClassification(DSL.name(alias), this);
    }

    @Override
    public BankTransactionClassification as(Name alias) {
        return new BankTransactionClassification(alias, this);
    }

    @Override
    public BankTransactionClassification as(Table<?> alias) {
        return new BankTransactionClassification(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BankTransactionClassification rename(String name) {
        return new BankTransactionClassification(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BankTransactionClassification rename(Name name) {
        return new BankTransactionClassification(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BankTransactionClassification rename(Table<?> name) {
        return new BankTransactionClassification(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super Long, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super Long, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
