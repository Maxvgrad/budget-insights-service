/*
 * This file is generated by jOOQ.
 */
package com.ploter.budgetinsights.infrastracture.persistence.jooq.model.tables;


import com.ploter.budgetinsights.infrastracture.persistence.jooq.model.Keys;
import com.ploter.budgetinsights.infrastracture.persistence.jooq.model.Public;
import com.ploter.budgetinsights.infrastracture.persistence.jooq.model.tables.records.BankTransactionRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BankTransaction extends TableImpl<BankTransactionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.bank_transaction</code>
     */
    public static final BankTransaction BANK_TRANSACTION = new BankTransaction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankTransactionRecord> getRecordType() {
        return BankTransactionRecord.class;
    }

    /**
     * The column <code>public.bank_transaction.id</code>.
     */
    public final TableField<BankTransactionRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.bank_transaction.import_group_id</code>.
     */
    public final TableField<BankTransactionRecord, Long> IMPORT_GROUP_ID = createField(DSL.name("import_group_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.bank_transaction.date</code>.
     */
    public final TableField<BankTransactionRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.bank_transaction.amount</code>.
     */
    public final TableField<BankTransactionRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(19, 8).nullable(false), this, "");

    /**
     * The column <code>public.bank_transaction.currency</code>.
     */
    public final TableField<BankTransactionRecord, String> CURRENCY = createField(DSL.name("currency"), SQLDataType.VARCHAR(3).nullable(false), this, "");

    /**
     * The column <code>public.bank_transaction.description</code>.
     */
    public final TableField<BankTransactionRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.bank_transaction.merchant</code>.
     */
    public final TableField<BankTransactionRecord, String> MERCHANT = createField(DSL.name("merchant"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.bank_transaction.reference</code>.
     */
    public final TableField<BankTransactionRecord, String> REFERENCE = createField(DSL.name("reference"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.bank_transaction.account</code>.
     */
    public final TableField<BankTransactionRecord, String> ACCOUNT = createField(DSL.name("account"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "");

    private BankTransaction(Name alias, Table<BankTransactionRecord> aliased) {
        this(alias, aliased, null);
    }

    private BankTransaction(Name alias, Table<BankTransactionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.bank_transaction</code> table reference
     */
    public BankTransaction(String alias) {
        this(DSL.name(alias), BANK_TRANSACTION);
    }

    /**
     * Create an aliased <code>public.bank_transaction</code> table reference
     */
    public BankTransaction(Name alias) {
        this(alias, BANK_TRANSACTION);
    }

    /**
     * Create a <code>public.bank_transaction</code> table reference
     */
    public BankTransaction() {
        this(DSL.name("bank_transaction"), null);
    }

    public <O extends Record> BankTransaction(Table<O> child, ForeignKey<O, BankTransactionRecord> key) {
        super(child, key, BANK_TRANSACTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BankTransactionRecord> getPrimaryKey() {
        return Keys.BANK_TRANSACTION_PKEY;
    }

    @Override
    public BankTransaction as(String alias) {
        return new BankTransaction(DSL.name(alias), this);
    }

    @Override
    public BankTransaction as(Name alias) {
        return new BankTransaction(alias, this);
    }

    @Override
    public BankTransaction as(Table<?> alias) {
        return new BankTransaction(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BankTransaction rename(String name) {
        return new BankTransaction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BankTransaction rename(Name name) {
        return new BankTransaction(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BankTransaction rename(Table<?> name) {
        return new BankTransaction(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, LocalDate, BigDecimal, String, String, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super Long, ? super LocalDate, ? super BigDecimal, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super Long, ? super LocalDate, ? super BigDecimal, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
